"""
===========================================================
ESCALA360 - Blueprint: Escalas
Autor: Anderson de Matos Guimar√£es
Data: 31/10/2025
===========================================================

Descri√ß√£o:
Gerencia a aloca√ß√£o de profissionais em plant√µes,
considerando as regras de neg√≥cio da Prova Pr√°tica:

1. Cada profissional possui carga hor√°ria m√°xima semanal (ex: 40h).
2. Um plant√£o n√£o pode ter dois profissionais no mesmo hor√°rio.
3. Substitui√ß√µes s√≥ podem ocorrer com 12h de anteced√™ncia (regra no m√≥dulo substituicoes).
4. Toda altera√ß√£o gera registro na tabela 'auditoria'.

Base de dados: Tabela 'escalas' (ver escala360.sql)
Campos: id, id_plantao, id_profissional, status, data_alocacao
===========================================================
"""

from flask import Blueprint, render_template, request, jsonify, current_app
from models import db, Escala, Profissional, Plantao, Auditoria
from datetime import datetime, timedelta
from sqlalchemy import func
from sqlalchemy.exc import SQLAlchemyError

escalas_bp = Blueprint("escalas_bp", __name__, url_prefix="/escalas")


# =========================================================
# üß© P√°gina principal
# =========================================================
@escalas_bp.route("/")
def view_escalas():
    """Renderiza a p√°gina de gest√£o de escalas."""
    profissionais = Profissional.query.filter_by(ativo=True).all()
    plantoes = Plantao.query.order_by(Plantao.data.asc()).all()
    current_app.logger.info("üóìÔ∏è Acesso √† p√°gina de gest√£o de escalas.")
    return render_template(
        "escalas.html",
        title="Gest√£o de Escalas",
        profissionais=profissionais,
        plantoes=plantoes,
    )


# =========================================================
# üìã Listar Escalas (GET)
# =========================================================
@escalas_bp.get("/api")
def listar_escalas():
    """Retorna todas as escalas com JOIN de profissional e plant√£o."""
    try:
        escalas = (
            db.session.query(Escala, Profissional, Plantao)
            .join(Profissional, Escala.id_profissional == Profissional.id)
            .join(Plantao, Escala.id_plantao == Plantao.id)
            .all()
        )

        data = [
            {
                "id": e.Escala.id,
                "profissional": e.Profissional.nome,
                "cargo": e.Profissional.cargo,
                "data": e.Plantao.data.strftime("%Y-%m-%d"),
                "hora_inicio": e.Plantao.hora_inicio.strftime("%H:%M"),
                "hora_fim": e.Plantao.hora_fim.strftime("%H:%M"),
                "status": e.Escala.status,
            }
            for e in escalas
        ]

        return jsonify(data), 200

    except SQLAlchemyError as e:
        current_app.logger.error(f"‚ùå Erro ao listar escalas: {e}")
        return jsonify({"ok": False, "error": str(e)}), 500


# =========================================================
# üÜï Criar Escala (POST)
# =========================================================
@escalas_bp.post("/api")
def criar_escala():
    """
    Cria uma nova escala com valida√ß√£o de conflito e carga hor√°ria.
    Exemplo de payload:
    {
        "id_profissional": 1,
        "id_plantao": 5,
        "status": "ativo"
    }
    """
    payload = request.get_json(silent=True) or {}

    try:
        id_profissional = payload.get("id_profissional")
        id_plantao = payload.get("id_plantao")
        status = payload.get("status", "ativo")

        if not (id_profissional and id_plantao):
            return jsonify({"ok": False, "error": "Campos obrigat√≥rios ausentes."}), 400

        plantao = Plantao.query.get_or_404(id_plantao)
        profissional = Profissional.query.get_or_404(id_profissional)

        # 1Ô∏è‚É£ Regra: evitar dois profissionais no mesmo plant√£o
        conflito = Escala.query.filter_by(id_plantao=id_plantao).first()
        if conflito:
            return jsonify(
                {"ok": False, "error": "Este plant√£o j√° possui um profissional alocado."}
            ), 400

        # 2Ô∏è‚É£ Regra: verificar carga hor√°ria semanal (m√°x. 40h)
        semana_ini = plantao.data - timedelta(days=plantao.data.weekday())
        semana_fim = semana_ini + timedelta(days=6)
        horas_semana = (
            db.session.query(func.sum(func.strftime("%H", Plantao.hora_fim) - func.strftime("%H", Plantao.hora_inicio)))
            .join(Escala, Escala.id_plantao == Plantao.id)
            .filter(Escala.id_profissional == id_profissional)
            .filter(Plantao.data.between(semana_ini, semana_fim))
            .scalar()
        )

        horas_semana = horas_semana or 0
        duracao_plantao = (
            datetime.combine(datetime.min, plantao.hora_fim)
            - datetime.combine(datetime.min, plantao.hora_inicio)
        ).seconds / 3600

        if horas_semana + duracao_plantao > 40:
            return jsonify(
                {"ok": False, "error": "Carga hor√°ria semanal excedida (m√°x. 40h)."}
            ), 400

        # 3Ô∏è‚É£ Cria√ß√£o da escala
        nova = Escala(
            id_plantao=id_plantao,
            id_profissional=id_profissional,
            status=status,
            data_alocacao=datetime.now(),
        )

        db.session.add(nova)
        db.session.commit()

        # 4Ô∏è‚É£ Registrar auditoria
        log = Auditoria(
            entidade="escala",
            id_entidade=nova.id,
            acao="criado",
            usuario="sistema",
            data_hora=datetime.now(),
        )
        db.session.add(log)
        db.session.commit()

        current_app.logger.info(f"‚úÖ Escala criada: {nova.id}")
        return jsonify({"ok": True, "id": nova.id}), 201

    except SQLAlchemyError as e:
        db.session.rollback()
        current_app.logger.error(f"‚ùå Erro ao criar escala: {e}")
        return jsonify({"ok": False, "error": str(e)}), 500


# =========================================================
# ‚úèÔ∏è Atualizar Escala (PUT)
# =========================================================
@escalas_bp.put("/api/<int:id>")
def atualizar_escala(id):
    """Atualiza o status ou o profissional de uma escala."""
    payload = request.get_json(silent=True) or {}
    try:
        escala = Escala.query.get_or_404(id)

        if "id_profissional" in payload:
            escala.id_profissional = payload["id_profissional"]
        if "status" in payload:
            escala.status = payload["status"]

        db.session.commit()

        # Auditoria
        log = Auditoria(
            entidade="escala",
            id_entidade=id,
            acao="atualizado",
            usuario="sistema",
            data_hora=datetime.now(),
        )
        db.session.add(log)
        db.session.commit()

        current_app.logger.info(f"‚úèÔ∏è Escala atualizada: {id}")
        return jsonify({"ok": True, "message": "Escala atualizada com sucesso."}), 200

    except SQLAlchemyError as e:
        db.session.rollback()
        current_app.logger.error(f"‚ùå Erro ao atualizar escala {id}: {e}")
        return jsonify({"ok": False, "error": str(e)}), 500


# =========================================================
# üóëÔ∏è Excluir Escala (DELETE)
# =========================================================
@escalas_bp.delete("/api/<int:id>")
def excluir_escala(id):
    """Remove uma escala e registra auditoria."""
    try:
        escala = Escala.query.get_or_404(id)
        db.session.delete(escala)
        db.session.commit()

        log = Auditoria(
            entidade="escala",
            id_entidade=id,
            acao="excluido",
            usuario="sistema",
            data_hora=datetime.now(),
        )
        db.session.add(log)
        db.session.commit()

        current_app.logger.warning(f"üóëÔ∏è Escala exclu√≠da: {id}")
        return jsonify({"ok": True, "message": "Escala exclu√≠da com sucesso."}), 200

    except SQLAlchemyError as e:
        db.session.rollback()
        current_app.logger.error(f"‚ùå Erro ao excluir escala {id}: {e}")
        return jsonify({"ok": False, "error": str(e)}), 500


# =========================================================
# üìä Relat√≥rios (Consultas da Prova)
# =========================================================
@escalas_bp.get("/api/relatorios")
def relatorios():
    """Executa consultas exigidas na prova."""
    try:
        # 1Ô∏è‚É£ Profissionais que atingiram/ultrapassaram 40h semanais
        query1 = """
        SELECT p.nome, SUM((julianday(pl.hora_fim) - julianday(pl.hora_inicio)) * 24) AS horas
        FROM profissionais p
        JOIN escalas e ON e.id_profissional = p.id
        JOIN plantoes pl ON e.id_plantao = pl.id
        GROUP BY p.nome
        HAVING horas >= 40;
        """

        # 2Ô∏è‚É£ Plant√µes sem profissional nas pr√≥ximas 48h
        query2 = """
        SELECT pl.id, pl.data, pl.hora_inicio, pl.hora_fim
        FROM plantoes pl
        LEFT JOIN escalas e ON pl.id = e.id_plantao
        WHERE e.id_plantao IS NULL
        AND datetime(pl.data || ' ' || pl.hora_inicio) <= datetime('now', '+48 hours');
        """

        # 3Ô∏è‚É£ Substitui√ß√µes pendentes
        query3 = """
        SELECT s.id, s.id_escala_original, p.nome AS solicitante, ps.nome AS substituto, s.status
        FROM substituicoes s
        JOIN profissionais p ON s.id_profissional_solicitante = p.id
        JOIN profissionais ps ON s.id_profissional_substituto = ps.id
        WHERE s.status = 'pendente';
        """

        resultados = {
            "profissionais_excedentes": db.session.execute(query1).mappings().all(),
            "plantoes_vagos": db.session.execute(query2).mappings().all(),
            "substituicoes_pendentes": db.session.execute(query3).mappings().all(),
        }

        current_app.logger.info("üìà Relat√≥rios de escalas gerados.")
        return jsonify(resultados), 200

    except SQLAlchemyError as e:
        current_app.logger.error(f"‚ùå Erro ao gerar relat√≥rios: {e}")
        return jsonify({"ok": False, "error": str(e)}), 500
