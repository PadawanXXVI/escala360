"""
===========================================================
ESCALA360 - Sistema de Gest√£o de Escalas e Produtividade
Autor: Anderson de Matos Guimar√£es
Data: 26/10/2025
Framework: Flask 3.1.2
===========================================================

Descri√ß√£o:
Aplica√ß√£o web modular com Blueprints (escalas, usu√°rios, turnos),
integra√ß√£o SQLite/SQLAlchemy, rotas de status e tratamento
de erros customizados. Inclui logs persistentes e seed inicial.
===========================================================
"""

from flask import Flask, render_template, jsonify, request
from config import Config
from models import init_app as init_db, popular_banco_inicial
import logging
from datetime import datetime  # ‚úÖ Necess√°rio para o contexto global

# =========================================================
# üîß Inicializa√ß√£o da Aplica√ß√£o Flask
# =========================================================
app = Flask(__name__)
app.config.from_object(Config)

# Inicializa e popula o banco SQLite
init_db(app)
popular_banco_inicial(app)

# =========================================================
# üßæ Logging
# =========================================================
logging.basicConfig(
    filename=Config.LOG_FILE,
    level=getattr(logging, Config.LOG_LEVEL.upper(), logging.INFO),
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%d/%m/%Y %H:%M:%S",
)
app.logger.info("‚úÖ Configura√ß√µes carregadas. Banco inicializado.")

# =========================================================
# üß© Registro de Blueprints
# =========================================================
from blueprints.escalas import escalas_bp
from blueprints.usuarios import usuarios_bp
from blueprints.turnos import turnos_bp

app.register_blueprint(escalas_bp)   # /escalas/...
app.register_blueprint(usuarios_bp)  # /usuarios/...
app.register_blueprint(turnos_bp)    # /turnos/...

# =========================================================
# üïì Contexto Global (para uso de {{ now() }} no Jinja)
# =========================================================
@app.context_processor
def inject_now():
    """Permite usar {{ now() }} diretamente nos templates Jinja."""
    return {'now': datetime.now}

# =========================================================
# üîπ Rotas ‚Äúcore‚Äù
# =========================================================
@app.get("/")
def index():
    """P√°gina inicial com o painel de produtividade (KPI + gr√°fico Plotly)."""
    app.logger.info("Acesso ao Painel de Produtividade (index.html)")
    return render_template("index.html", title="Painel Escala360")


@app.get("/api/status")
def status():
    """Retorna o status da aplica√ß√£o (√∫til para monitoramento)."""
    app.logger.info("Verifica√ß√£o de status do sistema")
    return jsonify(
        {
            "status": "online",
            "app": Config.APP_NAME,
            "version": Config.APP_VERSION,
            "environment": Config.FLASK_ENV,
        }
    )


@app.get("/erro500")
def erro_teste():
    """Rota para simular um erro interno (testar o template 500.html)."""
    raise Exception("Erro interno simulado para testes.")

# =========================================================
# ‚ùó Tratamento de Erros
# =========================================================
@app.errorhandler(404)
def page_not_found(e):
    """Erro 404 - P√°gina n√£o encontrada."""
    app.logger.warning(f"Erro 404 - P√°gina n√£o encontrada: {request.path}")
    return render_template("404.html", title="P√°gina n√£o encontrada"), 404


@app.errorhandler(500)
def internal_error(e):
    """Erro 500 - Falha interna do servidor."""
    app.logger.error(f"Erro 500 - Falha interna: {e}")
    return render_template("500.html", title="Erro Interno"), 500


# =========================================================
# üöÄ Execu√ß√£o Local
# =========================================================
if __name__ == "__main__":
    app.logger.info("üöÄ Servidor ESCALA360 iniciado em modo debug.")
    app.run(debug=Config.FLASK_DEBUG, host=Config.HOST, port=Config.PORT)
